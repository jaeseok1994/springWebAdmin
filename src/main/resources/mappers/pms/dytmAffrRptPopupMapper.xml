<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="proj.pms.dytmAffrRptPopup">

	<select id="selectOne" parameterType="map" resultType="cMap">
		<include refid="paging.head" /> <!-- 페이징 처리시 필수 -->

		SELECT
			PROJ_NO,
			(SELECT PROJ_NM FROM PROJECT_MASTER WHERE PROJ_NO = A.PROJ_NO)PROJ_NM,
			TITLE,
			SUBSTR(DRFT_DT,0,4)||'-'||SUBSTR(DRFT_DT,5,2)||'-'||SUBSTR(DRFT_DT,7,2) DRFT_DT,
			SUBSTR(DYTM_STRT_DT,0,4)||'-'||SUBSTR(DYTM_STRT_DT,5,2)||'-'||SUBSTR(DYTM_STRT_DT,7,2) DYTM_STRT_DT,
			PPRR_ID,
			(SELECT USER_NAME FROM SYS_USER WHERE USER_ID = A.PPRR_ID) PPRR_NM,
			TWK_ARSL,
			NXK_PLN,
			TWK_PLN_RATE,
			TWK_ARSL_RATE,
			ACUM_PLN_RATE,
			ACUM_ARSL_RATE,
			(SELECT ATTC_FIL_NM FROM ATTC_FIL B WHERE B.ATTC_FIL_SN = A.ATTC_FILNO) FIL_NM,
			ATTC_FILNO,
			REM,
			F_GETWEEK(DYTM_STRT_DT) AS GET_WEEK,
			TO_CHAR(TRUNC(TO_DATE(DYTM_STRT_DT,'YYYYMMDD'),'IW')+4,'YYYY-MM-DD') AS FRIDAY
		FROM DYAFFR_RPT A
		WHERE PROJ_NO = #{map.proj_no}
		AND DYTM_STRT_DT = TO_CHAR(TO_DATE(SUBSTR(REPLACE(#{map.dytm_strt_dt},'-'),1,8),'YYYYMMDD'),'YYYYMMDD')

		<include refid="paging.bottom" /> <!-- 페이징 처리시 필수 -->
	</select>

	<select id="IssueList" parameterType="map" resultType="cMap">
		<include refid="paging.head" /> <!-- 페이징 처리시 필수 -->

		select
			rkis_no,
			proj_no,
			(select acdn_nm from risk_issue where rkis_no = a.rkis_no) acdn_nm,
			(select x.cd_name from sys_code x where x.cd_g_code = 'PGS_ST' and x.cd_code = a.pgs_situ) as pgs_st,
			(select x.cd_name from sys_code x where x.cd_g_code = 'MGMT_SCN' and x.cd_code = a.risk_scn) as scn,
			NVL((SELECT 1 FROM DUAL WHERE EXISTS( SELECT RKIS_NO FROM proj_risk WHERE RKIS_NO = A.RKIS_NO)),0)chk
		from (select a.*,b.scn as risk_scn,b.pgs_situ from proj_risk a, risk_issue b where a.rkis_no = b.rkis_no)a
		where proj_no = #{proj_no}
		and dytm_strt_dt = TO_CHAR(TO_DATE(SUBSTR(REPLACE(#{dytm_strt_dt},'-'),1,8),'YYYYMMDD'),'YYYYMMDD')

		order by rkis_no
		<include refid="paging.bottom" /> <!-- 페이징 처리시 필수 -->
	</select>

	<select id="IssueSearch" parameterType="map" resultType="cMap">
		<include refid="paging.head" /> <!-- 페이징 처리시 필수 -->
		SELECT
		A.RKIS_NO
		,A.ACDN_NM
		,(SELECT X.CD_NAME FROM SYS_CODE X WHERE X.CD_G_CODE = 'MGMT_SCN' AND X.CD_CODE = A.SCN) AS SCN
		,A.PROJ_NO
		,(SELECT X.CD_NAME FROM SYS_CODE X WHERE X.CD_G_CODE = 'PGS_ST' AND X.CD_CODE = A.PGS_SITU) AS PGS_SITU
		<if test="proj_no != '' and proj_no != null">
			<if test="dytm_strt_dt != '' and dytm_strt_dt != null">
				,NVL((SELECT 1 FROM DUAL WHERE EXISTS(
				SELECT RKIS_NO
				FROM RISK_ISSUE
				WHERE RKIS_NO = A.RKIS_NO
				<if test="proj_no != '' and proj_no != null">
					<if test="dytm_strt_dt != '' and dytm_strt_dt != null">
						AND EXISTS(SELECT 1 FROM PROJ_RISK WHERE PROJ_NO = #{proj_no} AND DYTM_STRT_DT = #{dytm_strt_dt} AND RKIS_NO = A.RKIS_NO)
					</if>
				</if>)),0)chk
			</if>
		</if>
		FROM RISK_ISSUE A
		WHERE 1=1
		<if test="proj_no != '' and proj_no != null">
			AND PROJ_NO LIKE '%' || #{proj_no} || '%'
		</if>

		ORDER BY A.RKIS_NO
		<include refid="paging.bottom" /> <!-- 페이징 처리시 필수 -->
	</select>

	<select id="GetWeekCombo" parameterType="map" resultType="cMap">
		<include refid="paging.head" /> <!-- 페이징 처리시 필수 -->
		<![CDATA[
		SELECT
			TO_CHAR(MONDAY,'YYYY-MM-DD')|| ' ~ ' || TO_CHAR(SUNDAY,'YYYY-MM-DD')AS TEXT
			,WK
			,TO_CHAR(MONDAY,'YYYY-MM-DD') AS VALUE
		FROM
		(
			SELECT
				DAY
				,CASE 	WHEN LAST_DAY(DAY) - NEXT_DAY((LAST_DAY(DAY)-7),2) + 1 < 4                                                                             -- 월 마지막 주의 날수가 4일 미만이면서
						AND DAY <= LAST_DAY(DAY) AND DAY >= NEXT_DAY((LAST_DAY(DAY)-7),2)                                                              -- 오늘이 월 마지막 주의 일자에 포함되면
						THEN TO_CHAR(ADD_MONTHS(DAY,1),'YYYYMM')||'월 '||TO_CHAR(TRUNC(TO_DATE(TO_CHAR(DAY,'YYYYMMDD'),'YYYYMMDD'), 'IW') +3, 'W')||'주차'         -- 차월의 월이 속한 년도 + 주차를 취하고

						WHEN TO_NUMBER(TO_CHAR(NEXT_DAY((TRUNC(DAY,'MM')-1),1),'DD')) < 3                                                                           -- 월 첫주의 날수가 4일 미만이면서
						AND DAY <= NEXT_DAY((TRUNC(DAY,'MM')-1),1)                                                                                             -- 오늘이 월 첫 주의 일자에 포함되면
						THEN TO_CHAR(ADD_MONTHS(DAY,-1),'YYYYMM')||'월 '||TO_CHAR(TRUNC(TO_DATE(TO_CHAR(DAY,'YYYYMMDD'),'YYYYMMDD'), 'IW') +3, 'W')||'주차'        -- 전월의 월이 속한 년도 + 주차를 취하고

						ELSE TO_CHAR(DAY,'YYYYMM')||'월 '||TO_CHAR(TRUNC(TO_DATE(TO_CHAR(DAY,'YYYYMMDD'),'YYYYMMDD'), 'IW') +3, 'W')||'주차'                       -- 그외는 당월의 월이 속한 년도 + 주차를 취함.
					END AS WK
				,TRUNC(DAY,'IW') MONDAY
				,TRUNC(DAY,'IW')+6 SUNDAY
			FROM
			(
			SELECT
				  MONTHS + LEVEL -1 AS DAY
			FROM (
					SELECT
						TO_DATE('202107', 'YYYYMM') "MONTHS"
					FROM DUAL
				)
			CONNECT BY MONTHS + LEVEL -1 <= LAST_DAY(MONTHS)
			)
		)
		GROUP BY WK, MONDAY, SUNDAY
		HAVING WK LIKE '%'||'202107'||'%'
		ORDER BY MONDAY
		]]>
		<include refid="paging.bottom" /> <!-- 페이징 처리시 필수 -->
	</select>

	<select id="GetWeekSearch" parameterType="map" resultType="cMap">
		<include refid="paging.head" /> <!-- 페이징 처리시 필수 -->
		SELECT
			F_GETWEEK(#{map.dytm_strt_dt}) wk
		FROM DUAL
		<include refid="paging.bottom" /> <!-- 페이징 처리시 필수 -->
	</select>

	<select id="GetMonthCombo" parameterType="map" resultType="cMap">
		<include refid="paging.head" /> <!-- 페이징 처리시 필수 -->
		SELECT
			F_GETWEEK(#{map.dytm_strt_dt}) WK
		FROM DUAL
		<include refid="paging.bottom" /> <!-- 페이징 처리시 필수 -->
	</select>

	<insert id="insertList" parameterType="map" >
		<![CDATA[
		DECLARE
            USER_EXCEPTION EXCEPTION;
            V_ERR_MSG VARCHAR(2000);
			V_CNT NUMBER;
			V_DYTM_STRT_DT VARCHAR2(20);
        BEGIN

		V_DYTM_STRT_DT := TO_CHAR(TO_DATE(SUBSTR(REPLACE(#{map.dytm_strt_dt},'-'),1,8),'YYYYMMDD'),'YYYYMMDD');

		SELECT COUNT(*) INTO V_CNT
		FROM DYAFFR_RPT
		WHERE PROJ_NO = #{map.proj_no}
		AND DYTM_STRT_DT = V_DYTM_STRT_DT;

		IF V_CNT = 0 THEN

			INSERT INTO DYAFFR_RPT (
				PROJ_NO,TITLE,
				DRFT_DT,
				DYTM_STRT_DT,
				PPRR_ID,TWK_ARSL,NXK_PLN,TWK_PLN_RATE,TWK_ARSL_RATE,
				ACUM_PLN_RATE,ACUM_ARSL_RATE,rem,ATTC_FILNO,
				VBG_CRE_USER_ID,VBG_CRE_DT,FIN_UPDR_ID,FIN_MDFY_DT
			)values(
				#{map.proj_no},#{map.title},
				TO_CHAR(TO_DATE(SUBSTR(REPLACE(#{map.drft_dt},'-'),1,8),'YYYYMMDD'),'YYYYMMDD'),
				V_DYTM_STRT_DT,
				#{map.pprr_id}, #{map.twk_arsl}, #{map.nxk_pln},#{map.twk_pln_rate},#{map.twk_arsl_rate},
				#{map.acum_pln_rate},#{map.acum_arsl_rate}, #{map.rem},#{map.filno },
				#{_loginId_},systimestamp,#{_loginId_},systimestamp
			);

			IF #{rkis_no} IS NOT NULL THEN
				INSERT INTO PROJ_RISK (RKIS_NO,DYTM_STRT_DT,PROJ_NO,SCN,VBG_CRE_USER_ID,VBG_CRE_DT,FIN_UPDR_ID,FIN_MDFY_DT)
					SELECT  rkis_no,
							V_DYTM_STRT_DT,
							proj_no,
							scn,
							#{_loginId_},
							systimestamp,
							#{_loginId_},
							systimestamp
				from RISK_ISSUE
				WHERE PROJ_NO = #{map.proj_no}
				AND  INSTR(#{rkis_no}||',', RKIS_NO||',') > 0
				;
			END IF;
		ELSE
			UPDATE DYAFFR_RPT SET
				TITLE = #{map.title}
				, DRFT_DT = TO_CHAR(TO_DATE(SUBSTR(REPLACE(#{map.drft_dt},'-'),1,8),'YYYYMMDD'),'YYYYMMDD')
				, PPRR_ID = #{_loginId_}
				, TWK_ARSL = #{map.twk_arsl}
				, NXK_PLN = #{map.nxk_pln}
				, TWK_PLN_RATE = #{map.twk_pln_rate}
				, TWK_ARSL_RATE = #{map.twk_arsl_rate}
				, ACUM_PLN_RATE = #{map.acum_pln_rate}
				, ACUM_ARSL_RATE = #{map.acum_arsl_rate}
				, ATTC_FILNO = #{map.filno }
				, REM = #{map.rem}
				, FIN_UPDR_ID = #{_loginId_}
				, FIN_MDFY_DT = systimestamp
			where PROJ_NO = #{map.proj_no}
			AND DYTM_STRT_DT = V_DYTM_STRT_DT;

			DELETE FROM PROJ_RISK
			WHERE PROJ_NO = #{map.proj_no}
			AND DYTM_STRT_DT = V_DYTM_STRT_DT;

			INSERT INTO PROJ_RISK (RKIS_NO,DYTM_STRT_DT,PROJ_NO,SCN,VBG_CRE_USER_ID,VBG_CRE_DT,FIN_UPDR_ID,FIN_MDFY_DT)
					SELECT  rkis_no,
							V_DYTM_STRT_DT,
							proj_no,
							scn,
							#{_loginId_},
							systimestamp,
							#{_loginId_},
							systimestamp
				from RISK_ISSUE
				WHERE PROJ_NO = #{map.proj_no}
				AND  INSTR(#{rkis_no}||',', RKIS_NO||',') > 0
				;
		END IF;

        EXCEPTION
        WHEN USER_EXCEPTION THEN
            RAISE_APPLICATION_ERROR(-20001,V_ERR_MSG);
        END;
     ]]>
	</insert>

	<update id="updateList" parameterType="map">
		DECLARE
		USER_EXCEPTION EXCEPTION;
		V_ERR_MSG VARCHAR(2000);
		V_DOC_NO VARCHAR(20);

		BEGIN
			update twkafm set
				title = #{map.title}
				, proj_no = #{map.proj_no}
				, drft_dt = TO_CHAR(TO_DATE(SUBSTR(REPLACE(#{map.drft_dt},'-'),1,8),'YYYYMMDD'),'YYYYMMDD')
				, pprr_id = #{_loginId_}
				, twk_arsl = #{map.twk_arsl}
				, nxk_pln = #{map.nxk_pln}
				, twk_pln_rate = #{map.twk_pln_rate}
				, twk_arsl_rate = #{map.twk_arsl_rate}
				, acum_pln_rate = #{map.acum_pln_rate}
				, acum_arsl_rate = #{map.acum_arsl_rate}
				, attc_filno = #{map.filno }
				, rem = #{map.rem}
				, fin_updr_id = #{_loginId_}
				, fin_mdfy_dt = systimestamp
			where proj_no = #{map.proj_no}
			and dytm_strt_dt = #{map.dytm_strt_dt};

			DELETE FROM PROJ_RISK
			WHERE PROJ_NO = #{map.proj_no}
			AND DYTM_STRT_DT = #{map.dytm_strt_dt};

			INSERT INTO PROJ_RISK (rkis_no,proj_no,dytm_strt_dt,scn,vbg_cre_user_id,vbg_cre_dt,fin_updr_id,fin_mdfy_dt)

			SELECT  rkis_no,
					proj_no,
					{map.dytm_strt_dt},
					scn,
					#{_loginId_},
					systimestamp,
					#{_loginId_},
					systimestamp
			from TARKIS
			WHERE PROJ_NO = #{map.proj_no}
			AND  INSTR(#{rkis_no}||',', RKIS_NO||',') > 0
			;

		END;
	</update>
</mapper>